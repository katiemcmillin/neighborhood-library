{"ast":null,"code":"const compareKey = key => (a, b) => {\n  if (a[key] < b[key]) {\n    return -1;\n  }\n\n  if (a[key] > b[key]) {\n    return 1;\n  }\n\n  return 0;\n};\n\nexport const AZ = arr => arr.sort(compareKey(\"name\"));\n_c = AZ;\nexport const ZA = arr => arr.sort(compareKey(\"name\")).reverse();\n_c2 = ZA;\nexport const lowestFirst = arr => arr.sort((a, b) => parseInt(a.price) - parseInt(b.price));\nexport const highestFirst = arr => arr.sort((a, b) => parseInt(b.price) - parseInt(a.price));\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AZ\");\n$RefreshReg$(_c2, \"ZA\");","map":{"version":3,"sources":["/Users/katiemcmillin/general_assembly/sei/loon/unit_4/week_12/monday/homework/neighborhood-library/client/src/utils/sort.js"],"names":["compareKey","key","a","b","AZ","arr","sort","ZA","reverse","lowestFirst","parseInt","price","highestFirst"],"mappings":"AAAA,MAAMA,UAAU,GAAIC,GAAD,IAAS,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACpC,MAAID,CAAC,CAACD,GAAD,CAAD,GAASE,CAAC,CAACF,GAAD,CAAd,EAAqB;AACnB,WAAO,CAAC,CAAR;AACD;;AACD,MAAIC,CAAC,CAACD,GAAD,CAAD,GAASE,CAAC,CAACF,GAAD,CAAd,EAAqB;AACnB,WAAO,CAAP;AACD;;AACD,SAAO,CAAP;AACD,CARD;;AAUA,OAAO,MAAMG,EAAE,GAAIC,GAAD,IAASA,GAAG,CAACC,IAAJ,CAASN,UAAU,CAAC,MAAD,CAAnB,CAApB;KAAMI,E;AACb,OAAO,MAAMG,EAAE,GAAIF,GAAD,IAASA,GAAG,CAACC,IAAJ,CAASN,UAAU,CAAC,MAAD,CAAnB,EAA6BQ,OAA7B,EAApB;MAAMD,E;AACb,OAAO,MAAME,WAAW,GAAIJ,GAAD,IACzBA,GAAG,CAACC,IAAJ,CAAS,CAACJ,CAAD,EAAIC,CAAJ,KAAUO,QAAQ,CAACR,CAAC,CAACS,KAAH,CAAR,GAAoBD,QAAQ,CAACP,CAAC,CAACQ,KAAH,CAA/C,CADK;AAEP,OAAO,MAAMC,YAAY,GAAIP,GAAD,IAC1BA,GAAG,CAACC,IAAJ,CAAS,CAACJ,CAAD,EAAIC,CAAJ,KAAUO,QAAQ,CAACP,CAAC,CAACQ,KAAH,CAAR,GAAoBD,QAAQ,CAACR,CAAC,CAACS,KAAH,CAA/C,CADK","sourcesContent":["const compareKey = (key) => (a, b) => {\n  if (a[key] < b[key]) {\n    return -1;\n  }\n  if (a[key] > b[key]) {\n    return 1;\n  }\n  return 0;\n};\n\nexport const AZ = (arr) => arr.sort(compareKey(\"name\"));\nexport const ZA = (arr) => arr.sort(compareKey(\"name\")).reverse();\nexport const lowestFirst = (arr) =>\n  arr.sort((a, b) => parseInt(a.price) - parseInt(b.price));\nexport const highestFirst = (arr) =>\n  arr.sort((a, b) => parseInt(b.price) - parseInt(a.price));"]},"metadata":{},"sourceType":"module"}